#!/usr/bin/env python3
import argparse
import os
from subprocess import check_call
from generate_project import (generate, build_dir, target_dir, settings, ipy_name, jupyter_name)


def build_lib():
    vuetify_loader_removed = False
    if settings['variant'] == 'vuetify':
        # Remove vuetify-loader, so we can load a Jupyter compatible version of Vuetify. Ideally
        # this should be configured with vue-cli, but I've not yet figured out how to do that.
        try:
            check_call('yarn remove vuetify-loader', cwd=target_dir, shell=True)
            vuetify_loader_removed = True
        except:
            pass
    try:
        if not os.path.exists(f'{target_dir}/node_modules'):
            check_call('yarn install', cwd=target_dir, shell=True)
        check_call(
            f'npx vue-cli-service build --target lib --name component src/{settings["entry"]}',
            cwd=target_dir,
            shell=True)
    finally:
        # Undo the removal of vuetify-loader, so yarn serve works again.
        if vuetify_loader_removed:
            check_call('yarn add vuetify-loader@^1.2.2 --dev', cwd=target_dir, shell=True)


def sdist():
    check_call('python setup.py sdist', cwd=build_dir, shell=True)


def watch():
    try:
        if not os.path.exists(f'{build_dir}/js/node_modules'):
            check_call(f'npm install', cwd=f'{build_dir}/js', shell=True)
        check_call(f'npm run watch', cwd=f'{build_dir}/js', shell=True)
    except KeyboardInterrupt:
        pass

def build_prod():
    if not os.path.exists(f'{build_dir}/js/node_modules'):
        check_call(f'npm install', cwd=f'{build_dir}/js', shell=True)
    check_call(f'npm run prepare', cwd=f'{build_dir}/js', shell=True)


def install():
    check_call(f'jupyter nbextension uninstall {jupyter_name}', shell=True)
    check_call('pip install -e .', cwd=build_dir, shell=True)
    check_call(f'jupyter nbextension install --py --symlink --sys-prefix {ipy_name}', shell=True)
    check_call(f'jupyter nbextension enable --py --sys-prefix {ipy_name}', shell=True)


def install_dev(force):
    generate(force)
    build_lib()
    install()


parser = argparse.ArgumentParser(usage='''cli command [args]

commands:
    install-dev             Generates jupyter-extension project, builds it and installs in
                            developement mode. This has to be done only once.
    watch                   Runs JavaScript build in watch mode.
    build-lib               Builds vue-cli project with target lib. Use this when code has changed.
    regenerate-project      Regenerated project. Use this when ipyvuelink.yaml has changed
    publish-pypi            Publish extension on PyPi.
    publish-npm             Publish extension on NPM.
''')

parser.add_argument('command', type=str, help='The command')
parser.add_argument('--force', action='store_true', help='force')

args = parser.parse_args()

if args.command == 'install-dev':
    install_dev(args.force)
elif args.command == 'watch':
    watch()
elif args.command == 'build-lib':
    build_lib()
elif args.command == 'regenerate-project':
    generate(True)
elif args.command == 'publish-pypi':
    print('Not yet implemented')
elif args.command == 'publish-npm':
    generate(True)
    build_lib()
    build_prod()
    check_call('npm publish --public', cwd=f'{build_dir}/js', shell=True)
else:
    print(f'Unknown command: {args.command}')
